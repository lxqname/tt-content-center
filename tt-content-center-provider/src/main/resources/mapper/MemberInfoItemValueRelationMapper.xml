<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--客户映射 指定到dao接口 -->
<mapper namespace="com.deepexi.content.mapper.MemberInfoItemValueRelationMapper">
    <resultMap type="com.deepexi.content.domain.dto.MemberInfoItemValueRelationDto" id="MemberInfoItemValueRelationDtoResult">
        <result property="id" column="id" />
        <result property="itemId" column="item_id" />
        <result property="itemValueId" column="item_value_id" />
        <result property="tenantCode" column="tenant_code" />
        <result property="createdAt" column="created_at" />
        <result property="createdBy" column="created_by" />
        <result property="updatedAt" column="updated_at" />
        <result property="updatedBy" column="updated_by" />
        <result property="version" column="version" />
        <result property="dr" column="dr" />
    </resultMap>
    <sql id="Base_Column_List">
      id,      item_id,      item_value_id,      tenant_code,      created_at,      created_by,      updated_at,      updated_by,      version,      dr    </sql>
    <select id="findList" resultType="com.deepexi.content.domain.eo.MemberInfoItemValueRelation">
        SELECT <include refid="Base_Column_List"/> FROM member_info_item_value_relation WHERE dr=0
    </select>
    <!--批量增加会员信息id和会员信息项值的id-->
    <insert id="batchInsert">
        INSERT INTO coc_member_info_item_value_relation
        (id,item_id,item_value_id,tenant_code,created_at,created_by)
        VALUES
        <foreach collection="eo" index="index" item="value" separator=",">
        (#{value.id},#{value.itemId},#{value.itemValueId},#{value.tenantCode},#{value.createdAt},#{value.createdBy})
        </foreach>
    </insert>

    <update id="batchUpdate">
        INSERT INTO member_info_item_value_relation
        (        id,        item_id,        item_value_id,        tenant_code,        created_at,        created_by,        updated_at,        updated_by,        version,        dr)
        VALUES
        <foreach collection="eo" index="index" item="value" separator=",">
            (            #{value.id},            #{value.itemId},            #{value.itemValueId},            #{value.tenantCode},            #{value.createdAt},            #{value.createdBy},            #{value.updatedAt},            #{value.updatedBy},            #{value.version},            #{value.dr})
        </foreach>
        ON DUPLICATE KEY UPDATE
            id=values(id),            item_id=values(item_id),            item_value_id=values(item_value_id),            tenant_code=values(tenant_code),            created_at=values(created_at),            created_by=values(created_by),            updated_at=values(updated_at),            updated_by=values(updated_by),            version=values(version),            dr=values(dr)    </update>
    <update id="deleteByIds">
        UPDATE member_info_item_value_relation set dr=1 where id in
        <foreach collection="pks" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--根据会员信息项的id查询会员信息项值的id-->
    <select id="findById" parameterType="java.lang.String" resultType="java.lang.String">
        select item_value_id
        from coc_member_info_item_value_relation
        where
        item_id=#{itemId} and dr=0
    </select>

    <!--根据item_id删除关联表信息-->
    <update id="deleteByItemId" parameterType="java.lang.String">
        update coc_member_info_item_value_relation
        set dr=1
        where
        item_id=#{itemId} and dr=0
    </update>

</mapper>