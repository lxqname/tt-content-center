<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--客户映射 指定到dao接口 -->
<mapper namespace="com.deepexi.content.mapper.HotwordcountHotwordRelationMapper">
    <resultMap type="com.deepexi.content.domain.dto.HotwordcountHotwordRelationDto" id="HotwordcountHotwordRelationDtoResult">
        <result property="id" column="id" />
        <result property="hotWordCountId" column="hot_word_count_id" />
        <result property="hotWordId" column="hot_word_id" />
        <result property="tenantCode" column="tenant_code" />
        <result property="createdAt" column="created_at" />
        <result property="createdBy" column="created_by" />
        <result property="updatedAt" column="updated_at" />
        <result property="updatedBy" column="updated_by" />
        <result property="version" column="version" />
        <result property="dr" column="dr" />
    </resultMap>
    <sql id="Base_Column_List">
      id,      hot_word_count_id,      hot_word_id,      tenant_code,      created_at,      created_by,      updated_at,      updated_by,      version,      dr    </sql>
    <select id="findList" resultType="com.deepexi.content.domain.eo.HotwordcountHotwordRelation">
        SELECT <include refid="Base_Column_List"/> FROM hotwordcount_hotword_relation WHERE dr=0
    </select>
    <insert id="batchInsert">
        INSERT INTO hotwordcount_hotword_relation
        (        id,        hot_word_count_id,        hot_word_id,        tenant_code,        created_at,        created_by,        updated_at,        updated_by,        version,        dr)
        VALUES
        <foreach collection="eo" index="index" item="value" separator=",">
            (            #{value.id},            #{value.hotWordCountId},            #{value.hotWordId},            #{value.tenantCode},            #{value.createdAt},            #{value.createdBy},            #{value.updatedAt},            #{value.updatedBy},            #{value.version},            #{value.dr})
        </foreach>
    </insert>
    <update id="batchUpdate">
        INSERT INTO hotwordcount_hotword_relation
        (        id,        hot_word_count_id,        hot_word_id,        tenant_code,        created_at,        created_by,        updated_at,        updated_by,        version,        dr)
        VALUES
        <foreach collection="eo" index="index" item="value" separator=",">
            (            #{value.id},            #{value.hotWordCountId},            #{value.hotWordId},            #{value.tenantCode},            #{value.createdAt},            #{value.createdBy},            #{value.updatedAt},            #{value.updatedBy},            #{value.version},            #{value.dr})
        </foreach>
        ON DUPLICATE KEY UPDATE
        id=values(id),            hot_word_count_id=values(hot_word_count_id),            hot_word_id=values(hot_word_id),            tenant_code=values(tenant_code),            created_at=values(created_at),            created_by=values(created_by),            updated_at=values(updated_at),            updated_by=values(updated_by),            version=values(version),            dr=values(dr)    </update>
    <!--批量删除-->
    <update id="deleteByIds">
        UPDATE coc_hotwordcount_hotword_relation set dr=1 where id in
        <foreach collection="pks" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <!--根据热词id查询关系表id集合-->
    <select id="selectIdByHotWordId" parameterType="java.lang.String" resultType="java.lang.String">
        select id from coc_hotwordcount_hotword_relation where hot_word_id=#{hotWordId} and dr=0
    </select>

    <!--根据热词id查询热词统计id-->
    <select id="selectHotCountIdByHotWordId" parameterType="java.lang.String" resultType="java.lang.String">
        select hot_word_count_id from coc_hotwordcount_hotword_relation where hot_word_id=#{hotWordId} and dr=0
    </select>

    <!--根据热词统计id查询热词id的集合-->
    <select id="selectHotWordIdByHotWordCountId" parameterType="java.lang.String" resultType="java.lang.String">
        select hot_word_id from coc_hotwordcount_hotword_relation where hot_word_count_id=#{hotWordCountId} and dr=0
    </select>

    <!--根据热词统计id查询历史所有热词id的集合-->
    <select id="selectHistoryIds" parameterType="java.lang.String" resultType="java.lang.String">
        select hot_word_id from coc_hotwordcount_hotword_relation where hot_word_count_id=#{hotWordCountId}
    </select>

    <!--根据热词统计id逻辑删除关系表-->
    <update id="deleteByHotWordCountId" parameterType="java.lang.String">
        update coc_hotwordcount_hotword_relation set dr=1 where hot_word_count_id=#{hotWordCountId}  and dr=0
    </update>

    <!--删除自定义热词和热词统计关系-->
    <update id="deleteByHotWordIds" parameterType="java.util.List">
        update coc_hotwordcount_hotword_relation
        set dr=1
        where dr=0 and hot_word_id in
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

</mapper>